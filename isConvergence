def isConvergence(costF, max_iter):
    if math.isnan(np.sum(costF)):
        return False
    index = np.size(costF)
    # for i in range(index - 1):
    #     if costF[i] < costF[i + 1]:
    #         return False
    if index > 1:
        if costF[index - 1] == costF[index - 2]:
            return True
    if index >= max_iter:
        return True
    # elif costF[index - 1] == costF[index - 2] == costF[index - 3]:
    #     return True
    return 'continue'


def wkmeans(X, K, belta, max_iter, num):
    n, m = X.shape
    costF = []
    r = np.random.rand(1, m)
    w = np.divide(r, r.sum())
    idx = np.zeros((np.size(X, 0)), dtype=int)
    c = 0
    centroids = InitCentroids(X, K)
    for i in range(max_iter):
        
        idx = findClosestCentroids(X, w, centroids, num)
        
        c = costFunction(X, K, centroids, idx, w, belta, num)
        costF.append(round(c, 4))
        if i < 2:
            continue
        flag = isConvergence(costF, max_iter)
        if flag == 'continue':
            continue
        elif flag:
            best_labels = idx
            best_centers = centroids
            isConverge = True
            return isConverge, best_labels, best_centers, costF
        
        centroids = computeCentroids(X, idx, K, num)
        
        c = costFunction(X, K, centroids, idx, w, belta, num)
        costF.append(round(c, 4))
        if i < 2:
            continue
        flag = isConvergence(costF, max_iter)
        if flag == 'continue':
            continue
        elif flag:
            best_labels = idx
            best_centers = centroids
            isConverge = True
            return isConverge, best_labels, best_centers, costF
        
        w = computeWeight(X, centroids, idx, K, belta, num)
        
        c = costFunction(X, K, centroids, idx, w, belta, num)
        costF.append(round(c, 4))
        if i < 2:
            continue
        flag = isConvergence(costF, max_iter)
        if flag == 'continue':
            continue
        elif flag:
            best_labels = idx
            best_centers = centroids
            isConverge = True
            return isConverge, best_labels, best_centers, costF
    isConverge = False
    return isConverge, None, None, costF
